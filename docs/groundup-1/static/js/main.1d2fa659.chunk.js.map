{"version":3,"sources":["assets/blue.svg","new/components/PageHeader.tsx","icons/List.tsx","new/components/SidebarButton.tsx","new/components/Layout.tsx","new/utils.ts","pages/HomePage.tsx","pages/ThirdPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","PageHeader","children","className","Icon","xmlns","width","height","fill","viewBox","fillRule","d","SidebarButton","props","createElement","href","ignore","forEach","key","clearProps","Object","assign","classNames","active","label","Layout","appLogo","appTitle","touchySize","window","getComputedStyle","document","body","getPropertyValue","trim","getTouchySize","includes","parseInt","replace","splitPos","localStorage","getItem","useState","current","setCurrent","splitPaneSize","setSplitPaneSize","transition","setTransition","useEffect","ElementQueries","init","doSetSplitPaneSize","size","setItem","toString","onClick","onMouseEnter","onMouseLeave","List","src","alt","onChange","minSize","maxSize","style","transform","role","aria-label","HomePage","require","ThirdPage","App","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,iLCEpC,SAASC,EAAT,GAA4D,IAAtCC,EAAqC,EAArCA,SACzB,OACI,wBAAIC,UAAU,+DACTD,G,qDCeEE,MAlBf,WACI,OACI,yBACIC,MAAM,6BACNC,MAAM,MACNC,OAAO,MACPC,KAAK,eACLL,UAAU,aACVM,QAAQ,aAER,0BACIC,SAAS,UACTC,EAAE,yKCGX,SAASC,EAAcC,GAC1B,OACIC,wBAAcD,EAAME,KAAO,IAAM,SATzC,SAAoBF,EAA+BG,GAI/C,OAHAA,EAAOC,SAAQ,SAACC,UACLL,EAAMK,MAEVL,EAKwCM,CAAWC,OAAOC,OAAO,CAChElB,UAAWmB,IACP,0FACA,CACI,cAAeT,EAAMU,UAG9BV,GAAQ,CAAC,WACR,oCACKA,EAAMX,SACNW,EAAMW,OAAS,0BAAMrB,UAAU,QAAQU,EAAMW,S,MCbvD,SAASC,EAAT,GAAgE,IAA9CvB,EAA6C,EAA7CA,SAAUwB,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,SAEpCC,EClBD,WAA0B,IAAD,MAC5B,iBAAOC,cAAP,iBAAO,EAAQC,iBAAR,UAAyBC,gBAAzB,aAAyB,EAAUC,MAAMC,iBAAiB,mBAAjE,aAAO,EAAuEC,ODiB5CC,GAE9BP,EADAA,GAA6B,KAAfA,GAAqBA,EAAWQ,SAAS,MAC1CC,SAAST,EAAWU,QAAQ,KAAM,IAAK,IAGvC,GAEjB,IAAMC,EAAWC,aAAaC,QAAQ,YAT4B,EAWpCC,mBAAS,GAX2B,mBAW3DC,EAX2D,KAWlDC,EAXkD,OAYxBF,mBAAuB,OAAbH,EAAoBF,SAASE,EAAU,IAAMX,GAZ/B,mBAY3DiB,EAZ2D,KAY5CC,EAZ4C,OAa9BJ,oBAAS,GAbqB,mBAa3DK,EAb2D,KAa/CC,EAb+C,KAelEC,qBAAU,WACNC,IAAeC,UAGnB,IAAMC,EAAqB,SAACC,GACxBP,EAAiBO,GACjBb,aAAac,QAAQ,WAAYD,EAAKE,aAG1C,OACI,yBAAKpD,UAAWmB,IAAW,SAAU,CAAE,WAAcyB,KACjD,4BAAQ5C,UAAU,+CACd,4BACIA,UAAU,sHACVqD,QAAS,WAEDJ,EADAP,IAAkBjB,EACCA,EAGA,MAG3B6B,aAAc,kBAAMT,GAAc,IAClCU,aAAc,kBAAMV,GAAc,KAElC,kBAACW,EAAD,OAEJ,yBAAKxD,UAAU,oBACX,yBAAKyD,IAAKlC,EAASmC,IAAKlC,EAAUxB,UAAU,UAC5C,wBAAIA,UAAU,0CAA0CwB,KAIhE,kBAAC,IAAD,CACI0B,KAAMR,EACNiB,SAAUV,EACVW,QAASnC,EACToC,QAAS,KAET,yBAAK7D,UAAU,qCACX,yBAAKA,UAAU,mCACX,yBACIA,UAAU,kEACV8D,MAAO,CAAEC,UAAU,mBAAD,OAAqBvB,EAArB,yBAEtB,kBAAC/B,EAAD,CAAeG,KAAK,IAAIyC,QAAS,kBAAMZ,EAAW,IAAIpB,MAAM,SACxD,yBAAKoC,IAAKlC,EAASmC,IAAKlC,EAAUxB,UAAU,gBAEhD,kBAACS,EAAD,CAAeG,KAAK,IAAIyC,QAAS,kBAAMZ,EAAW,IAAIpB,MAAM,UACxD,0BAAM2C,KAAK,MAAMC,aAAW,YAAYjE,UAAU,QAAlD,mCAEJ,kBAACS,EAAD,CAAeG,KAAK,SAASyC,QAAS,kBAAMZ,EAAW,IAAIpB,MAAM,SAC7D,0BAAM2C,KAAK,MAAMC,aAAW,YAAYjE,UAAU,QAAlD,qCAKZ,6BACKD,KErFd,SAASmE,IACZ,OACI,kBAAC,EAAD,CAAQ3C,QAAS4C,EAAQ,IAAuB3C,SAAS,QACrD,0BAAMxB,UAAU,aACZ,6BAASA,UAAU,QACf,kBAACF,EAAD,iCAEA,4BAAQE,UAAU,sBAAlB,YACA,4BAAQA,UAAU,wBAAlB,gBACA,4BAAQA,UAAU,sBAAlB,iBAGJ,iCACI,kBAACF,EAAD,mCAEA,2BAAG,kDAAH,kFAGA,oRClBb,SAASsE,IACZ,OACI,kBAAC,EAAD,CAAQ7C,QAAS4C,EAAQ,IAAuB3C,SAAS,QACrD,0BAAMxB,UAAU,aACZ,qFAEA,2vCCmBDqE,MAlBf,WACI,OACI,kBAAC,IAAD,KACI,oCACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,UACR,kBAACF,EAAD,OAGJ,kBAAC,IAAD,CAAOE,KAAK,KACR,kBAACJ,EAAD,WCTJK,QACa,cAA7B7C,OAAO8C,SAASC,UAEiB,UAA7B/C,OAAO8C,SAASC,UAEhB/C,OAAO8C,SAASC,SAASC,MACrB,2DCbZC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJjD,SAASkD,eAAe,SDkIpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1d2fa659.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/blue.78dd83b0.svg\";","import React, { ReactNode } from \"react\";\r\n\r\nexport function PageHeader({ children }: { children: ReactNode }) {\r\n    return (\r\n        <h1 className=\"border-bottom border-light mt-4 mb-3 pb-2 font-weight-light\">\r\n            {children}\r\n        </h1>\r\n    );\r\n}","import React from \"react\";\r\n\r\nfunction Icon() {\r\n    return (\r\n        <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"1em\"\r\n            height=\"1em\"\r\n            fill=\"currentColor\"\r\n            className=\"bi bi-list\"\r\n            viewBox=\"0 0 16 16\"\r\n        >\r\n            <path\r\n                fillRule=\"evenodd\"\r\n                d=\"M2.5 11.5A.5.5 0 013 11h10a.5.5 0 010 1H3a.5.5 0 01-.5-.5zm0-4A.5.5 0 013 7h10a.5.5 0 010 1H3a.5.5 0 01-.5-.5zm0-4A.5.5 0 013 3h10a.5.5 0 010 1H3a.5.5 0 01-.5-.5z\"\r\n            ></path>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default Icon;","import React, { createElement } from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\ntype AProps = JSX.IntrinsicElements[\"a\"];\r\n\r\nexport interface ISidebarButtonProps extends AProps {\r\n    active?: boolean;\r\n    label?: string;\r\n}\r\n\r\nfunction clearProps(props: { [key: string]: any }, ignore: string[]): object {\r\n    ignore.forEach((key: string) => {\r\n        delete props[key];\r\n    });\r\n    return props;\r\n}\r\n\r\nexport function SidebarButton(props: ISidebarButtonProps) {\r\n    return (\r\n        createElement(props.href ? \"a\" : \"button\", clearProps(Object.assign({\r\n            className: classNames(\r\n                \"btn btn-lg btn-theme h-touchy d-flex align-items-center rounded-0 pl-2 box-shadow-inset\",\r\n                {\r\n                    \"border-left\": props.active\r\n                }\r\n            )\r\n        }, props), [\"active\"]),\r\n            <>\r\n                {props.children}\r\n                {props.label && <span className=\"ml-2\">{props.label}</span>}\r\n            </>\r\n        )\r\n    );\r\n}","import React, { ReactNode, useState, useEffect } from \"react\";\r\nimport SplitPane from \"react-split-pane\";\r\nimport ElementQueries from \"css-element-queries/src/ElementQueries\";\r\nimport classNames from \"classnames\";\r\nimport List from \"../../icons/List\";\r\nimport { SidebarButton } from \"./SidebarButton\";\r\n\r\nimport \"../styles/Layout.scss\";\r\nimport { getTouchySize } from \"../utils\";\r\n\r\nexport interface ILayoutProps {\r\n    children: ReactNode;\r\n    appLogo?: string | undefined;\r\n    appTitle?: string | undefined;\r\n}\r\n\r\nexport function Layout({ children, appLogo, appTitle }: ILayoutProps) {\r\n\r\n    let touchySize: number | string = getTouchySize();\r\n    if (touchySize && touchySize !== \"\" && touchySize.includes(\"px\")) {\r\n        touchySize = parseInt(touchySize.replace(\"px\", \"\"), 10);\r\n    }\r\n    else {\r\n        touchySize = 48;\r\n    }\r\n    const splitPos = localStorage.getItem(\"splitPos\");\r\n\r\n    const [current, setCurrent] = useState(0);\r\n    const [splitPaneSize, setSplitPaneSize] = useState((splitPos !== null ? parseInt(splitPos, 10) : touchySize) as string | number);\r\n    const [transition, setTransition] = useState(false);\r\n\r\n    useEffect(() => {\r\n        ElementQueries.init();\r\n    });\r\n\r\n    const doSetSplitPaneSize = (size: string | number) => {\r\n        setSplitPaneSize(size);\r\n        localStorage.setItem(\"splitPos\", size.toString());\r\n    };\r\n\r\n    return (\r\n        <div className={classNames(\"Layout\", { \"transition\": transition })}>\r\n            <header className=\"bg-theme d-flex align-items-center h-touchy\">\r\n                <button\r\n                    className=\"btn btn-trans btn-lg p-0 d-flex align-items-center justify-content-center rounded-0 h-100 w-touchy box-shadow-inset\"\r\n                    onClick={() => {\r\n                        if (splitPaneSize !== touchySize) {\r\n                            doSetSplitPaneSize(touchySize);\r\n                        }\r\n                        else {\r\n                            doSetSplitPaneSize(265);\r\n                        }\r\n                    }}\r\n                    onMouseEnter={() => setTransition(true)}\r\n                    onMouseLeave={() => setTransition(false)}\r\n                >\r\n                    <List />\r\n                </button>\r\n                <div className=\"p-2 d-flex h-100\">\r\n                    <img src={appLogo} alt={appTitle} className=\"h-100\" />\r\n                    <h4 className=\"text-white font-weight-light ml-2 mb-0\">{appTitle}</h4>\r\n                </div>\r\n            </header>\r\n\r\n            <SplitPane\r\n                size={splitPaneSize}\r\n                onChange={doSetSplitPaneSize}\r\n                minSize={touchySize}\r\n                maxSize={500}\r\n            >\r\n                <div className=\"Sidebar bg-theme text-white h-100\">\r\n                    <div className=\"position-relative element-query\">\r\n                        <div\r\n                            className=\"SidebarButtonIndicator bg-white h-touchy pl-1 position-absolute\"\r\n                            style={{ transform: `translateY(calc(${current} * var(--touchy)))` }}\r\n                        />\r\n                        <SidebarButton href=\"#\" onClick={() => setCurrent(0)} label=\"Start\">\r\n                            <img src={appLogo} alt={appTitle} className=\"h-100 mr-1\" />\r\n                        </SidebarButton>\r\n                        <SidebarButton href=\"#\" onClick={() => setCurrent(1)} label=\"Second\">\r\n                            <span role=\"img\" aria-label=\"Astro cat\" className=\"mx-1\">üê±‚ÄçüöÄ</span>\r\n                        </SidebarButton>\r\n                        <SidebarButton href=\"/third\" onClick={() => setCurrent(1)} label=\"Third\">\r\n                            <span role=\"img\" aria-label=\"Stunt cat\" className=\"mx-1\">üê±‚Äçüèç</span>\r\n                        </SidebarButton>\r\n                    </div>\r\n                </div>\r\n\r\n                <div>\r\n                    {children}\r\n                </div>\r\n            </SplitPane>\r\n        </div>\r\n    );\r\n}","export function getTouchySize() {\r\n    return window?.getComputedStyle(document?.body).getPropertyValue(\"--touchy\")?.trim();\r\n}","import React from \"react\";\r\nimport { PageHeader } from \"../new/components/PageHeader\";\r\nimport { Layout } from \"../new/components/Layout\";\r\n\r\nexport function HomePage() {\r\n    return (\r\n        <Layout appLogo={require(\"../assets/blue.svg\")} appTitle=\"Blue\">\r\n            <main className=\"container\">\r\n                <article className=\"mb-5\">\r\n                    <PageHeader>Welcome to the next Blue</PageHeader>\r\n\r\n                    <button className=\"btn btn-light mr-1\">Click me</button>\r\n                    <button className=\"btn btn-primary mr-1\">But click me</button>\r\n                    <button className=\"btn btn-theme mr-1\">But click me</button>\r\n                </article>\r\n\r\n                <article>\r\n                    <PageHeader>Was gibt es hier momentan?</PageHeader>\r\n\r\n                    <p><code>react-split-pane</code> ist installiert. Damit kann die Sidebar frei per\r\n                    Drag-Drop verschoben werden.</p>\r\n\r\n                    <p>Ich habe versucht bis jetzt alles nur mit Bootstrap-Mitteln zu stylen, kein\r\n                    eigener CSS-Code. Bootstrap-Variablen wurden lediglich mit Sass angepasst, bzw.\r\n                        erweitert. Ansonsten habe ich mich gro√üteils an Bootstraps Utility Classes bedient.</p>\r\n                </article>\r\n            </main>\r\n        </Layout>\r\n    );\r\n}","import React from \"react\";\r\nimport { PageHeader } from \"../new/components/PageHeader\";\r\nimport { Layout } from \"../new/components/Layout\";\r\n\r\nexport function ThirdPage() {\r\n    return (\r\n        <Layout appLogo={require(\"../assets/blue.svg\")} appTitle=\"Blue\">\r\n            <main className=\"container\">\r\n                <h1>Sleep everywhere, but not in my bed grass smells good</h1>\r\n\r\n                <p>Groom forever, stretch tongue and leave it slightly out, blep really likes hummus burrow under covers. Stand with legs in litter box, but poop outside and sometimes switches in french and say \"miaou\" just because well why not claw drapes, yet cat meoooow i iz master of hoomaan, not hoomaan master of i, oooh damn dat dog but russian blue and if it fits i sits. Sniff all the things meow meow mama, but chirp at birds dead stare with ears cocked cat gets stuck in tree firefighters try to get cat down firefighters get stuck in tree cat eats firefighters' slippers go into a room to decide you didn't want to be in there anyway. I‚Äôm so hungry i‚Äôm so hungry but ew not for that somehow manage to catch a bird but have no idea what to do next, so play with it until it dies of shock. Pee in human's bed until he cleans the litter box touch my tail, i shred your hand purrrr for stretch, for throwup on your pillow, so under the bed meow or meowing chowing and wowing. Decide to want nothing to do with my owner today. Unwrap toilet paper i hate cucumber pls dont throw it at me. Cat cat moo moo lick ears lick paws. Warm up laptop with butt lick butt fart rainbows until owner yells pee in litter box hiss at cats grass smells good.</p>\r\n            </main>\r\n        </Layout>\r\n    );\r\n}","import React from \"react\";\r\n\r\nimport \"./App.scss\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\nimport { HomePage } from \"./pages/HomePage\";\r\nimport { ThirdPage } from \"./pages/ThirdPage\";\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <>\r\n                <Switch>\r\n                    <Route path=\"/third\">\r\n                        <ThirdPage />\r\n                    </Route>\r\n\r\n                    <Route path=\"/\">\r\n                        <HomePage />\r\n                    </Route>\r\n                </Switch>\r\n            </>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won\"t work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let\"s check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It\"s the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can\"t reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}